################################################################
#         INTRODUCTION TO R: N°1 (WORKING PROGRESS)           #
################################################################

#This is an RScript (or script). Here we write commands/"orders" that R interprets and executes.
#When we write something after "#" means that is only text. This is very useful to write down your own thoughts or interpretations.

#There are some commands that are very useful in R: 
##help("command"): will give you information about the command: description, usage, arguments, details, value, references, examples, etc.

### When working with R you need to download and install packages. The packages are extenstions to the R statistical programming language that contain code, data, and dcumentation in a standardised collection format that can be installed by users of R 
#The most recommended packages are: base, compiler, datasets, grDevices, graphics, grid, methods, and others, clustger, foreign, lattice
#Also it is increasingly popular: tidyverse and ggplot2. With tidyverse you can import data, clean, transform and visualice (is one of the most downloaded R packages) 

#To install packages: 
download.packages("tidyverse")
install.packages("tidyverse") #allows you to import from different formats
install.packages("manipulate")
install.packages("haven") #allows to import .dta files
install.packages("readxl") #alows to import .xls files
install.packages("logr") #allows to log/record process
install.packages("dplyr") #allos to chang nams
install.packages ("Hmisc") #allows to create labels 


#Activate packages:
library("tidyverse") #allows you to import from different formats
library("manipulate")
library("haven") #allows to import .dta files
library("readxl") #alows to import .xls files
library("logr") #allows to log/record process
library("dplyr") #allows to change names 
library("Hmisc") #allows to create labels 


##R works by writing: 
#command(dataset) or 
#command(dataset$variable) or 
#command(dataset$variable, especification/option)
#Is case sensitive (its easier if all databases and variables are in lower case)

### When working with R you must create a Project in which you will have all the scripts related to that project, also you need to SET YOUR WORKING DIRECTORY.
#Setting the directory tells R in which folder on your computer your data is located and when your new data is going to be saved.
setwd("C://Users//user//Documents//Maestría//LUND//Econometrics I//Lab1")

#You also use those paths to call data from different sources
#When importing new data you have to assigned a name to the data. Usually can be the same name of the original file, but can change according the need. 
lab1_2022 <- read_dta("C://Users//user//Documents//Maestría//LUND//Econometrics I//Lab1//lab1_2022.dta")


### To EXPLORE your data in R, you can use the following commands: 
dim(lab1_2022) #dimensions of the data set: number of cases and variables
str(lab1_2022) # structure of the data 
head(lab1_2022) # first 6 rows
tail(lab1_2022) # last 6 rows
summary(lab1_2022) #if variable is continuous it will bring: min, Q1, median, mean, Q3, MAX, NA 
View(lab1_2022) # You will see the data base

#We can do the same with variables (continuous): 
summary(lab1_2022$age) #Here "summary" is the command, "lab1_2022" the dataset and "age" the variable we want to summarize
summary(lab1_2022)
#We can also see the list of cathegorical variables: 
list(lab1_2022$var7)

###TO LOG. It is a way to record what you have done. Later, when you run many regressions or cross-tabs, it is useful to just look in your log the results
#You need the "logr" package, which helps to create log files for R scripts. Useful when you want a written log of your program execution

lf <- log_open (tmp) #initiates the log
log_print("hello") #print objects 
sum <- summary(lab1_2022) 
log_print(sum) #print objects
log_close() #close the log
writeLines(readLines(lf)) #view the log (the work done)

###ORDER and SORT data. Sorts(order) a vector or factor into ascending or descending order. 
#Gives as some vectors, but doesn't change the visualization of the data. 

order(lab1_2022$labor_income) #cases in ascending order 
sort(lab1_2022$labor_income, decreasing = TRUE) #income ammount in descending order
sort(lab1_2022$labor_income) #income ammount in ascending order (by default)

#We can search for specific cases
list(lab1_2022$var7[35])
kids <- lab1_2022$wife_present==0
table(kids)

###TO TABULATE 
table(lab1_2022$wife_present)
table(lab1_2022$labor_income, lab1_2022$wife_present)
table(lab1_2022$education, lab1_2022$nr_of_kids)

###TO RENAME VARIABLES AND CREATE LABELS
#Dataset from other sources can be ambiguos or inconvenient, so it is useful to rename them into something easily to interpret
#newdataset <- command(dataset, new variable name = old variable name)

lab1_2022 <- rename(lab1_2022, name=var7)

#A label is a description to a variable (longer, it can have spaces)
# command(dataset$variable) <- "label/description"
label(lab1_2022$name) <- "First name of individual"

#You can see the attributes of the data set: number of rows, names and class.
attributes(lab1_2022)

#You can see the type of the variable with the command typeof or mode
#Modes have the same set of names as types, expect that
#types "integer" and "double" are returned as "numeric".
#types "special", "builtin" and "closure" are returned as "function".
#type "symbol" is called mode "name".
#type "language" is returned as "(" or "call")

typeof(lab1_2022$wife_present)
typeof(lab1_2022$education)
typeof(lab1_2022$nr_of_kids)
typeof(lab1_2022$home_owner)
typeof(lab1_2022$name)
typeof(lab1_2022$age)
typeof(lab1_2022$test)
typeof(lab1_2022$edu)

mode(lab1_2022$wife_present)
mode(lab1_2022$education)
mode(lab1_2022$nr_of_kids)
mode(lab1_2022$home_owner)
mode(lab1_2022$name)
mode(lab1_2022$age)
mode(lab1_2022$test)
mode(lab1_2022$edu)

#But, to find out the distributions of the variable is better to us summary
summary(lab1_2022)

#ELIMINATING AND CREATING VARIABLES 
#newdata = command(oldata, select =- c(variable you want to eliminate) 
lab1_2022 = subset(lab1_2022, select = -c(test))

#to crate a new variable we use dataset$new variable <- value assigned
lab1_2022$test <- 1

#to change the value of the variable 
lab1_2022$test <- 2

## CREATE A CATEGORICAL VARIABLE FROM CONTINUOS VARIABLE
#If we want to change a continuous variable into a categorical variable, we have to do this: 


################################################################
#                MISSING INFO / INCOMPLETED                    #
################################################################
